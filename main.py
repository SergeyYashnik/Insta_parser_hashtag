import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import os
from dotenv import load_dotenv


start_time = time.time()

load_dotenv()

INSTAGRAM_USERNAME = os.getenv("INSTAGRAM_USERNAME")
INSTAGRAM_PASSWORD = os.getenv("INSTAGRAM_PASSWORD")

options = webdriver.ChromeOptions()
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
options.add_argument("--window-size=1920,1080")

driver = webdriver.Chrome(options=options)

driver.get("https://www.instagram.com")
time.sleep(5)

try:
    username_input = driver.find_element(By.NAME, "username")
    password_input = driver.find_element(By.NAME, "password")

    username_input.send_keys(INSTAGRAM_USERNAME)
    password_input.send_keys(INSTAGRAM_PASSWORD)
    password_input.send_keys(Keys.RETURN)

    time.sleep(10)
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram!")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", e)
    driver.quit()
    exit()

hashtag = "—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä2"
url = f"https://www.instagram.com/explore/search/keyword/?q={hashtag}"
driver.get(url)
time.sleep(5)

# div_class_name = "xfcsdxf"
# div_element = driver.find_element(By.CLASS_NAME, div_class_name)  # –ù–∞—Ö–æ–¥–∏–º div —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º

try:
    div_element = driver.find_element(By.XPATH, "//main[@role='main']").find_elements(By.XPATH, "./div")[0].find_elements(By.XPATH, "./div")[1]
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")





actions = ActionChains(driver)

data_list = []

previous_links = set()



MAX_CHECKS = 10  # 0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ = –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
check_count = 0

while MAX_CHECKS == 0 or check_count < MAX_CHECKS:
    links = div_element.find_elements(By.TAG_NAME, "a")
    new_links_found = False

    for link in links:
        link_href = link.get_attribute("href")

        if not link_href or link_href in previous_links:
            continue

        previous_links.add(link_href)
        driver.execute_script("arguments[0].scrollIntoView({block: 'start'});", link)
        time.sleep(0.5)

        actions.move_to_element(link).perform()
        time.sleep(0.5)

        # üîπ –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å—Å—ã–ª–∫—É (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ø–∞–ø)
        link.click()
        time.sleep(1)  # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø–∞–ø–∞

        try:
            # üîπ –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:"
            view_text_elements = driver.find_elements(By.XPATH, "//span[contains(text(), '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')]")
            like_text_elements = driver.find_elements(By.XPATH, "//span[contains(text(), '–ù—Ä–∞–≤–∏—Ç—Å—è')]")

            view_count = None
            like_count = None

            if view_text_elements:
                for view_text in view_text_elements:
                    try:
                        view_count_span = view_text.find_element(By.TAG_NAME, "span")
                        view_count = view_count_span.text
                        break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è {link_href}: {e}")

            if not view_count and like_text_elements:
                for like_text in like_text_elements:
                    try:
                        like_count_span = like_text.find_element(By.TAG_NAME, "span")
                        like_count = like_count_span.text
                        break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —á–∏—Å–ª–∞ –ª–∞–π–∫–æ–≤ –¥–ª—è {link_href}: {e}")

            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –ª–∞–π–∫–æ–≤, —Å—Ç–∞–≤–∏–º "0"
            data_list.append({
                "URL": link_href,
                "views": view_count if view_count else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "likes": like_count if like_count else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            })

            print(
                f"üîó {link_href} | üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {view_count if view_count else '–Ω–µ—Ç'} | ‚ù§Ô∏è –õ–∞–π–∫–∏: {like_count if like_count else '–Ω–µ—Ç'}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

        try:
            # ‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è SVG-–∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è (–¥–æ 5 —Å–µ–∫—É–Ω–¥)
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//*[name()='svg' and @aria-label='–ó–∞–∫—Ä—ã—Ç—å']"))
            )

            # üîç –ò—â–µ–º SVG-–∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            close_svg = driver.find_element(By.XPATH, "//*[name()='svg' and @aria-label='–ó–∞–∫—Ä—ã—Ç—å']")
            close_button = close_svg.find_element(By.XPATH, "./ancestor::div[@role='button']")

            # üñ± –ù–∞–≤–æ–¥–∏–º –º—ã—à–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º (–µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
            actions.move_to_element(close_button).perform()
            time.sleep(0.5)

            # üñ± –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
            close_button.click()

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–∞: {e}")

        new_links_found = True
        check_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º

        if MAX_CHECKS > 0 and check_count >= MAX_CHECKS:
            print("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º.")
            break

        time.sleep(1)

    if not new_links_found:
        print("‚ö†Ô∏è –ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç, —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑...")
        driver.execute_script("window.scrollBy(0, 800);")
        time.sleep(3)

        new_links = div_element.find_elements(By.TAG_NAME, "a")
        if all(link.get_attribute("href") in previous_links for link in new_links):
            print("‚ùå –ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º.")
            break



print("\n‚úÖ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
for item in data_list:
    print(f"üîó {item['URL']} | üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {item['views']} | ‚ù§Ô∏è –õ–∞–π–∫–∏: {item['likes']}")

if data_list:
    df = pd.DataFrame(data_list)
    excel_filename = f"{hashtag}.xlsx"
    df.to_excel(excel_filename, index=False)
    print(f"üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {excel_filename}")
else:
    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

driver.quit()

end_time = time.time()

elapsed_time = end_time - start_time

hours = int(elapsed_time // 3600)
minutes = int((elapsed_time % 3600) // 60)
seconds = int(elapsed_time % 60)

print(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {hours}—á {minutes}–º {seconds}—Å")